{"version":3,"sources":["firebase/config.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Title.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","comps/Modal.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","imageStorage","storage","imageFirestore","firestore","timestamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","className","map","onClick","url","src","alt","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","style","width","UploadForm","types","type","onChange","e","selected","target","files","includes","Modal","selectedImg","classList","contains","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75947b70.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/storage';\nimport 'firebase/firestore';\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyAgqV-z4Qbl2nKcKrynAzGymaNkv5HqoMI\",\n    authDomain: \"image-bucket-e6ccf.firebaseapp.com\",\n    projectId: \"image-bucket-e6ccf\",\n    storageBucket: \"image-bucket-e6ccf.appspot.com\",\n    messagingSenderId: \"855095723612\",\n    appId: \"1:855095723612:web:c69e113fd6300f8c5fc899\",\n    measurementId: \"G-6VC2485NP0\"\n  };\n\n//initialize firebase\nfirebase.initializeApp(firebaseConfig);\n\nconst imageStorage = firebase.storage();\nconst imageFirestore = firebase.firestore();\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\n\nexport { imageStorage, imageFirestore, timestamp };","import { useEffect, useState } from 'react';\nimport  { imageFirestore } from '../firebase/config';\n\nconst useFirestore = (collection) => {\n    \n    const [docs, setDocs ] = useState([]);\n    \n    useEffect(() => {\n        const unsub = imageFirestore.collection(collection)\n            .orderBy('createdAt', 'desc')\n            .onSnapshot((snap) => {\n                let documents = [];\n                snap.forEach(doc => {\n                    documents.push({...doc.data(), id: doc.id})\n                });\n                setDocs(documents)\n            });\n\n            return () => unsub();\n\n    }, [collection])\n\n    return { docs }; \n}\n\nexport default useFirestore;","import React from 'react';\nimport useFirestore from '../hooks/useFirestore';\n\nconst ImageGrid = ({ setSelectedImg }) => {\n\n    const {docs} = useFirestore('images');\n    \n    return (\n        <div className=\"img-grid\">\n            { docs && docs.map(doc => (\n                <div className=\"img-wrap\" key={doc.id}\n                    onClick={() => setSelectedImg(doc.url)}\n                >\n                    <img src={doc.url} alt=\"uploaded pic\"/>\n                </div>\n            ))}\n        </div>\n    )\n}\n\nexport default ImageGrid;","import React from 'react';\n\nconst Title = () => {\n    return (\n        <div className={Title}>\n            <h1>Image Bucket</h1>\n            <h2>Upload your pictures in the bucket</h2>\n            \n        </div>\n    ) \n}\n\nexport default Title;","import { useEffect, useState } from 'react';\nimport { imageStorage, imageFirestore, timestamp } from '../firebase/config';\n\n\nconst useStorage = (file) => {\n\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState(null);\n    const [url, setUrl] = useState(null);\n\n    useEffect(() => {\n        //references of imgs\n        const storageRef = imageStorage.ref(file.name);\n        const collectionRef = imageFirestore.collection('images');\n\n        storageRef.put(file).on('state_changed', (snap) => {\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n            setProgress(percentage);\n        }, (err) => {\n            setError(err);\n        }, async () => {\n            const url = await storageRef.getDownloadURL();\n            const createdAt = timestamp();\n            collectionRef.add({ url, createdAt });\n            setUrl(url);\n        })\n    }, [file]);\n\n    return {progress, url, error}\n}\n\nexport default useStorage;","import React, { useEffect } from 'react';\nimport useStorage from '../hooks/useStorage';\n\nconst ProgressBar = ({ file, setFile }) => {\n    const { url, progress } = useStorage(file);\n\n    useEffect(() => {\n        if(url){\n            setFile(null);\n        }\n    }, [url, setFile])\n\n    return (\n        <div className=\"progress-bar\" style={{ width: progress + '%' }}></div>\n    )\n}\n\nexport default ProgressBar;","import React, { useState } from 'react';\nimport ProgressBar from './ProgressBar';\n\nconst UploadForm = () => {\n    const [file, setFile] = useState(null);\n    const [error, setError] = useState(null);\n\n    const types = ['image/png', 'image/jpeg'];\n\n    const changeHandler = (e) => {\n        let selected = e.target.files[0];\n        if(selected && types.includes(selected.type)) {\n            setFile(selected);\n            setError('');\n        }else{\n            setFile(null);\n            setError('Please select an image file of type png or jpeg/jpg');\n        }\n    }\n\n    return (\n        <form>\n            <label>\n                <input type=\"file\" onChange={changeHandler} />\n                <span>click to upload</span>\n            </label>\n            <div className=\"output\">\n                { error && <div className=\"error\">{ error }</div> }\n                { file && <div> { file.name }</div> }\n                { file && <ProgressBar file={file} setFile={setFile}/> }\n            </div>\n        </form>\n    )\n}\n\nexport default UploadForm;","import React from 'react';\n\nconst Modal = ({ selectedImg, setSelectedImg }) => {\n    \n    const handleClick = (e) =>{\n        if(e.target.classList.contains('backdrop')){\n            setSelectedImg(null);\n        }\n    }\n\n    return (\n        <div className=\"backdrop\" onClick={handleClick}>\n            <img src={selectedImg} alt=\"enlarged pic\"/>\n        </div>\n    )\n}\n\nexport default Modal;","import './App.css';\nimport ImageGrid from './comps/ImageGrid';\nimport Title from './comps/Title';\nimport UploadForm from './comps/UploadForm';\nimport Modal from './comps/Modal';\nimport { useState } from 'react';\n\nfunction App() {\n  const [selectedImg, setSelectedImg] = useState(null);\n  return (\n    <div className=\"App\">\n     <Title />\n     <UploadForm />\n     <ImageGrid setSelectedImg={setSelectedImg}/>\n     { selectedImg && <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg}/> }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}